#CARGAR BASE

library(readxl)

# Leer matrices desde hojas diferentes y eliminar la col "folio"
matriz1 <- as.matrix(read_excel("~/Tesis/Bases/SMAE2025_CFC.xlsx.xlsx", sheet = "FREC")[, -1])
matriz2 <- as.matrix(read_excel("~/Tesis/Bases/SMAE2025_CFC.xlsx.xlsx", sheet = "KCAL")[, -1])

#Verificar si son de la misma dimensión
identical(dim(matriz1), dim(matriz2))


#Matriz de resultado

data<- matriz1*matriz2

#IDENTIFICAR SI HAY DATOS FALTANTES
library(tidyverse)
sum(is.na(data)) #sum para contabilizar el total de NA's
summary(data) # para ver la información resumida de cada columna


#AGRUPAR ALIMENTOS Y PROMEDIAR POR GRUPO
grupo_lacteos <- data[, c("FREC001", "FREC002","FREC003","FREC004", 
                          "FREC005", "FREC006", "FREC007")] #la coma antes de c permite crear un dataframe de cols completas, sin ella creariamos una lista.

grupo_frutas <- data[, c("FREC008","FREC009","FREC010","FREC011",
                         "FREC012","FREC013","FREC014","FREC015",
                         "FREC016","FREC017","FREC018","FREC019",
                         "FREC021","FREC022","FREC023","FREC024",
                         "FREC025")]

grupo_carnes <- data[, c("FREC026","FREC027","FREC028","FREC029",
                         "FREC030","FREC031","FREC032","FREC033",
                         "FREC034","FREC035","FREC036","FREC037",
                         "FREC038","FREC039","FREC040","FREC041")]

grupo_verduras <- data[, c("FREC042","FREC043","FREC044","FREC045",
                           "FREC046","FREC047","FREC048","FREC049",
                           "FREC050","FREC051","FREC052","FREC053",
                           "FREC054","FREC055","FREC056","FREC057",
                           "FREC058")]

grupo_leguminosas <- data[, c("FREC059","FREC060","FREC061","FREC062",
                              "FREC063")]

grupo_cereales <- data[, c("FREC064","FREC065","FREC066","FREC067",
                           "FREC068","FREC069","FREC070","FREC071",
                           "FREC072")]

grupo_golosinas <- data[, c("FREC075","FREC076","FREC077","FREC078",
                            "FREC079")]

grupo_bebidas <- data[, c("FREC080","FREC081","FREC082","FREC083",
                          "FREC084","FREC085","FREC086","FREC087",
                          "FREC088","FREC089")]


grupo_grasas <- data[, c("FREC090","FREC091","FREC092","FREC093",
                         "FREC094","FREC095","FREC096","FREC097",
                         "FREC098","FREC099","FREC100")]

grupo_antojitos <- data[, c("FREC101","FREC102","FREC103","FREC104")]


#Calcular el promedio por grupo

lacteos_prom<-rowMeans(grupo_lacteos,na.rm = TRUE)

frutas_prom<-rowMeans(grupo_frutas,na.rm = TRUE)

carnes_prom<-rowMeans(grupo_carnes, na.rm = TRUE)

verduras_prom<-rowMeans(grupo_verduras, na.rm = TRUE)

leguminosas_prom<-rowMeans(grupo_leguminosas, na.rm = TRUE)

cereales_prom<-rowMeans(grupo_cereales, na.rm = TRUE)

golosinas_prom<-rowMeans(grupo_golosinas, na.rm = TRUE)

bebidas_prom<-rowMeans(grupo_bebidas, na.rm = TRUE)

grasas_prom<-rowMeans(grupo_grasas, na.rm = TRUE)

antojitos_prom<-rowMeans(grupo_antojitos, na.rm = TRUE)

#Crear dataframe con los promedios por grupo

grupos_prom<-data.frame(lacteos_prom, frutas_prom, carnes_prom,
                   verduras_prom, leguminosas_prom, cereales_prom,
                   golosinas_prom, bebidas_prom, grasas_prom, antojitos_prom)


###PASO 1: VERIFICAR QUE LA MATRIZ DE DATOS ES FACTORIZABLE###

#matriz de correlación policorica
library(psych)
library(polycor)
library(ggcorrplot)

mat_cor <- hetcor(grupos_prom)$correlations
ggcorrplot(mat_cor,type="lower",hc.order = T)
print(mat_cor)

#Verificar que la matriz sea factorizable usando la prueba de Bartlett o el criterio de Kaiser-Meyer-Olkin, ¿Existe la suficiente correlación para efectuar AF?

#Bartlett
cortest.bartlett((mat_cor),n=3385)->p_esf
p_esf$p #Dado que el p−value=0, rechazamos la hipótesis nula y concluimos que las variables efectivamente están correlacionadas entre sí.

#KMO
KMO(mat_cor) #El valor global es de 0.81, entre más cercano a 1 nos indica que es adecuado realizar el EFA.

###PASO 2: ESCOGER UN MÉTODO PARA EXTRAER FACTORES###

#probar 2 modelos
m1 <- fa(mat_cor, nfactor=4, rotate = "none",
         fm="minres", max.iter = 1000, n.obs = 3385 ) #modelo de min residuo

m2<- fa(mat_cor, nfactor=4, rotate = "none",
        fm="pa", max.iter = 1000, n.obs = 3385 ) #modelo de ejes principales


#comparacion de comunalidades
c1 <-sort(m1$communality, decreasing = T)
c2 <-sort(m2$communality, decreasing = T)

head(cbind(c1,c2))

#comparación de las unicidades 
u1 <- sort(m1$uniquenesses,decreasing = T)
u2 <- sort(m2$uniquenesses,decreasing = T)
head(cbind(u1,u2))

###PASO 3: DETERMINAR EL NUMERO DE FACTORES ###

# 1. Valores propios _Kaiser criterion (>1)
ei<- eigen(mat_cor)$values
ei[ei > 1] # Eigenvalores significativos
length(ei[ei > 1])  # Cantidad de factores recomendados

# 2. Scree plot
plot(ei,type="b",pch=20,col="blue",
     xlab = "Factor", ylab = "Valor propio",
     main = "Scree Plot (Criterio de Kaiser)")
abline(h=1,lty=3,col="red") # Línea de Kaiser

#3. Analisis paralelo

fa.parallel(mat_cor, fa = "both", n.iter = 1000, n.obs = 3385)

par(mfrow=c(1,1))  # Esto evita que se divida la pantalla
scree(mat_cor, factors = TRUE, pc = TRUE,
      main = "Scree Plot con Kaiser y PCA", 
      hline=NULL, add=FALSE, sqrt=FALSE)


###PASO 4: ROTACIÓN DE FACTORES (Ortogonal u oblicua)###

resultado <- fa(mat_cor, nfactors = 2, fm = "minres", rotate = "oblimin", n.obs = 3385)
resultado$Phi  # Si hay correlaciones > 0.3 entre factores, usar oblimin. Si no, mejor varimax.

#Cargas factoriales
resultado$loadings
